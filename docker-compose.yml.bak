# TerraGroupLabs/docker-compose.yml
version: '3.8'

services:
  spacetimedb_server:
    image: clockworklabs/spacetime:latest # Use a specific version for production
    container_name: spacetimedb_chat_server
    ports:
      - "3000:3000" # HTTP API for clients (as used in Program.cs)
      - "3001:3001" # TCP API for clients (alternative connection method)
      - "3002:3002" # Admin UI - useful for debugging
    volumes:
      # Mount the directory containing the compiled WASM module.
      # Adjust the source path if your build output is different.
      # :ro makes it read-only in the container, which is good practice.
      - ./code/TerraGroupLabs/server/bin/Release/net8.0/wasi-wasm/AppBundle:/module:ro
      # Persist SpacetimeDB data (e.g., the spacetime.db file)
      - spacetimedb_chat_data:/data
    # Command to start SpacetimeDB with your module
    # --db-name must match what your client expects ("quickstart-chat")
    # --module-path points to where server.wasm is inside the container (due to the volume mount)
    # --dev enables hot-reloading of the module, very useful for development.
    # --address 0.0.0.0 ensures SpacetimeDB listens on all interfaces inside the container.
    working_dir: / # Set a working directory if needed for relative paths in publish
    entrypoint: /bin/sh
    command: 
      - -c
      - |
        echo 'Attempting to publish module...' &&
        spacetime publish --project-path server tg-labs-chat &&
        echo 'Publish successful, starting server...' &&
        spacetime start --listen-addr 0.0.0.0:3000
      

    # For production, we might remove --dev and consider not specifying --module-path
    # if we use `spacetimedb publish` and let it manage the module within its data directory.

volumes:
  spacetimedb_chat_data: # Named volume for data persistence